log_level=2				# debug level (cmd line: -dddddddddd)
log_stderror=no		# (cmd line: -E)
log_facility=LOG_LOCAL2


check_via=no		# (cmd. line: -v)
dns=no				# (cmd. line: -r)
rev_dns=no			# (cmd. line: -R)
children=1
listen=udp:{{ hostname.stdout }}:5060
listen=tcp:{{ hostname.stdout }}:5060
wdir="/home/reicom/"

alias={{ alias.stdout }}
user_agent_header="User-Agent: SIPProxy Reitek SpA"
# ------------------ module loading ----------------------------------

mpath="/usr/lib/opensips/modules"
# Uncomment this if you want to use SQL database
#loadmodule "/usr/local/lib/openser/modules/mysql.so"

loadmodule "sl.so"
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "uri.so"
loadmodule "options.so"
loadmodule "avpops.so"
loadmodule "dispatcher.so"
loadmodule "signaling.so"
loadmodule "mi_fifo.so"
loadmodule "db_text.so"
loadmodule "sipmsgops.so"
loadmodule "topology_hiding.so"
loadmodule "rest_client.so"
loadmodule "json.so"
loadmodule "proto_udp.so"
loadmodule "proto_tcp.so"
loadmodule "db_mysql.so"
loadmodule "dialog.so"
loadmodule "rtpproxy.so"
loadmodule "uac_registrant.so"
loadmodule "uac_auth.so"
loadmodule "auth.so"
loadmodule "uac.so"
loadmodule "cachedb_memcached.so"
loadmodule "event_route.so"
loadmodule "dialplan.so"
loadmodule "cachedb_local.so"
loadmodule "cachedb_redis.so"

modparam("tm", "fr_timeout", 10)
modparam("dispatcher", "db_url","text:///usr/share/opensips/dbtext/opensips")
modparam("dispatcher", "dst_avp", "$avp(271)")
modparam("dispatcher", "grp_avp", "$avp(272)")
modparam("dispatcher", "cnt_avp", "$avp(273)")
modparam("dispatcher", "ds_ping_interval", 30)
modparam("dispatcher", "ds_probing_threshhold", 0)
modparam("dispatcher", "ds_ping_from", "sip:reitek@reitek.com")
modparam("dispatcher", "ds_ping_method", "OPTIONS")
modparam("mi_fifo",  "fifo_name", "/var/run/opensips_fifo")
modparam("registrar", "case_sensitive", 0)
modparam("registrar", "default_q", 1000)
modparam("usrloc", "use_domain", 0)
modparam("usrloc", "timer_interval", 60)
modparam("usrloc", "db_mode", 2)


modparam("topology_hiding", "force_dialog", 1)
modparam("uac_auth","auth_realm_avp","$avp(realm)")
modparam("uac_auth","auth_username_avp","$avp(user)")
modparam("uac_auth","auth_password_avp","$avp(pwd)")
modparam("dialog", "db_mode", 0)
modparam("rest_client", "curl_timeout", 1)    #Bug 5947
modparam("rest_client", "connect_poll_interval", 5)
modparam("tm", "onreply_avp_mode", 1)
modparam("auth", "username_spec", "$var(username)")
modparam("auth", "password_spec", "$avp(password)")
modparam("auth", "calculate_ha1", 1)


modparam("db_text", "db_mode", 0)
modparam("tm", "disable_6xx_block", 1)

{{ rtpproxy_endpoint.stdout }}
modparam("rtpproxy", "nortpproxy_str", "")

modparam("uac_registrant|usrloc|dialog|dialplan", "db_url", "mysql://easycim:{{ password_easycim.stdout }}@{{ puntamento_db.stdout }}:3306/opensips")
modparam("cachedb_memcached", "cachedb_url","memcached:g1://memcached-host:11211/")
modparam("cachedb_redis", "cachedb_url","redis:g1://redis-host:6379/")

# -------------------------  request routing logic -------------------


startup_route
{
	xlog("L_NOTICE", "startup_route - $time(%T).$Tsm");
	$json(sipsbcproxy) := "{}";
	$var(rec_lifetime) = 14400; # Recorder variable lifetime in seconds
	$var(regexp)="/^(INVITE|Via|Route|Max-Forwards|Allow|Content-Type|Content-Length|CSeq|To|From|X-2X-CallProfileID|X-2X-DNIS|X-2X-Service|X-2X-JobType):?\s.*//g";
}


# main routing logic

route
{
	$var(callrouter)="http://localhost:8600/CallRouter";
	xlog("L_INFO","------------------------------------------------------------");
	xlog("L_DBG","Init route - $Tf");
	xlog("L_NOTICE", "$time(%T).$Tsm - $rm $ru - From:$fu - To:$tu - call-id $ci - CSeq: $cs received from [$si:$sp] - size: $ml");
	xlog("L_INFO", "Message: $mb");

	# initial sanity checks -- messages with
	# max_forwards==0, or excessively long requests

	if (!mf_process_maxfwd_header("10"))
	{
		sl_send_reply("483","Too Many Hops");
		xlog("L_WARN", "Message: $mb\n has too many Hops - answered 483");
		exit;
	};

	xlog("L_DBG","Check msg len");

	if (msg:len >=  2048 )
	{
		sl_send_reply("513", "Message too big");
		xlog("L_WARN", "Message: $mb\nMessage too big - answered 513");
		exit;
	};

	# uncomment the following lines to record-route
	# we record-route all messages -- to make sure that
	# subsequent messages will go through our proxy; that's
	# particularly good if upstream and downstream entities
	# use different transport protocol

	xlog("L_DBG","if not register record route");
	if (!method=="REGISTER")
	{
		record_route();
	}

	if (method=="SUBSCRIBE")
	{
		sl_send_reply("405", "Method not allowed");
		exit;
	}

	if (has_totag() && uri != myself) {
		xlog("L_INFO", "Message not for me");
	} else if (has_totag() && topology_hiding_match()) {
		xlog("L_INFO","topology_hiding_match $ci\n");
		if (method == "ACK" && match_dialog() ) {

			xlog("L_DBG","ACK  - fromUser $dlg_val(fromUser) and $dlg_val(toUser)");
			if ( $dlg_val(fromUser) ) {
				subst('/^From: <sip:(\w+)@(.*)$/From: <sip:$dlg_val(fromUser)@\2/ig');
			}
			if ( $dlg_val(toUser) ) {
				subst('/^To: <sip:(\w+)@(.*)$/To: <sip:$dlg_val(toUser)@\2/ig');
			}

		}

		route(1);
	}


	if ( method == "OPTIONS" && !has_totag() && uri != myself)
	{
		xlog("L_DBG","URI not for me and OPTIONS out of dialog");
		loose_route();

		if (uri=~"rtpproxy=") {
			$var(key)=$si + ":" + $sp;
			$json(sipsbcproxy/$var(key)) =  $(ru{uri.param,rtpproxy});
			xlog("L_INFO","sipsbcproxy is: $json(sipsbcproxy)");
		}
		route(1);
	}

	if (method=="BYE" && match_dialog()){
		fetch_dlg_value("rtpproxy","$var(rtpproxy)");
		if ($var(rtpproxy) == "YES" ) {
			$avp(startTS_S) = $Ts;
			$avp(startTS_SM) = $Tsm;
			async(rest_get("http://{{ restget_stereo_rec.stdout }}/stereo_recording/stereo_recording.php?mode=end&callid=$ci", "$var(body)",,  "$var(rcode)"),"1"); #go to route[1]
		}
	}

	# subsequent messages withing a dialog should take the
	# path determined by record-routing
	if ( !is_present_hf("X-RTPProxy") &&  loose_route())
	{
		xlog("L_INFO","loose route - send and exit - callid $ci");


		if (method=="INVITE" && !has_totag() && is_present_hf("X-RTPProxy") && is_present_hf("X-2X-CallUUID")) {
			xlog("L_INFO","Call needs to be rtpproxy(ed) - CallUUID is $hdr(X-2X-CallUUID)");
			route(rtpproxy_passiverec);
		}

		if (method=="OPTIONS" && uri=~"rtpproxy=") {
			xlog("L_DBG","RTPPROXY: $(ru{uri.param,rtpproxy})");
			$var(key)=$si + ":" + $sp;
			$json(sipsbcproxy/$var(key)) = $(ru{uri.param,rtpproxy});
			xlog("L_INFO","sipsbcproxy is: $json(sipsbcproxy)");
		}

		route(1);
		exit;
	}

	if (t_check_trans())
	{
		if ( is_method("CANCEL") || is_method("ACK"))
		{
			# CANCEL with matching INVITE transaction, just t_relay
			xlog("L_INFO","$rm with matching transaction ... t_relay.");
		}
		else
		{
			xlog("L_WARN","$rm retransmission, forward message!!!");
		}
		route(1);
		exit;

	}

	if ( is_method("CANCEL"))
	{
		# CANCEL without matching INVITE transaction, ignore
		# may happen if  the INVITE is slower than the CANCEL
		#  ignore the CANCEL, as the client will retransmit it,  and maybe
		# the INVITE transaction is already created
		xlog("L_WARN","CANCEL without matching transaction ... ignore and discard.\n$mb\n");
		exit;
	}



	if (is_method("ACK"))
	{
		xlog("L_WARN","ACK received in wrong state");
		if ( t_check_trans() )
		{
			xlog("L_WARNING","Transaction found - relay message");
			route(1);
		}
		else
		{
			sl_reply_error();
			xlog("L_ERR","ERROR - Transaction not found exit");
		}
		exit;
	}

	if (!uri==myself)
	{
		# mark routing logic in request
		xlog("L_DEBUG", "uri != myself");
		if(uri=~"tel:.*")
		{
			#Check if registered
			route(2);
			#Check X2X Routing table
			route(6);
		}
		else
		{
			xlog("L_INFO", "Proxy msg to the real destination <$rd:$rp>");
			if ( search("P-Hint: Reitek outbound\r\n") && !topology_hiding_match()) {
				xlog("L_INFO","Apply topology hiding");
				topology_hiding("U");
			}

			#test rtpproxy for passive rercorder
			$var(key)=$rd + ":" +  $rp;
			xlog("L_INFO", "Request domain is: $var(key) and sipsbc are: $json(sipsbcproxy)");
			if (is_method("INVITE") && !has_totag() && (($hdr(X-RTPProxy) == "yes" && $ua=~"SIPSBC") || ($json(sipsbcproxy/$var(key)) == "yes" )) ) {
				route(rtpproxy_passiverec);
			}


			route(1);
		}
		exit;
	}

	# if the request is for other domain use UsrLoc
	# (in case, it does not work, use the following command
	# with proper names and addresses in it)
	if (uri==myself)
	{
		xlog("L_DEBUG","uri == myself");

		if (method == "INVITE" && (search("User-Agent: Reitek SIPSBCGW Provider") || search ("User-Agent: SIPProxy Reitek SpA")) ) {
			xlog("L_INFO","$time(%T).$Tsm - Reitek SIPSBCGW Provider - Call outboundrouter");
			$avp(startTS_S) = $Ts;
			$avp(startTS_SM) = $Tsm;
			async(rest_get("http://localhost/outboundrouter/outbound_router.php?from=$fu&to=$tu", "$var(body)",,  "$var(rcode)"),resumeOutboundRouteCB);
		}

		if ( method == "INVITE" && uri=~"^sip:(b2b|sipsbc)")
		{
			route(2);
		}


		route(check_auth);
		if ($rc < 0) {
			xlog("L_ERROR", "Message not authenticated");
			sl_send_reply("403", "Forbidden");
			exit;
		}

		# Message coming from SIPSBC

		if ( from_uri=~"sip:8.*" && search("User-Agent: SIPSBC"))
		{
			xlog("L_INFO", "Message coming from SIPSBC for B2BUAEP");
			route(LookupPattern);
			exit;
		}

		#Check VENDORS
		route(9);

		# Being here means that the message was not coming from one of the VENDORS

		if (method=="REGISTER")
		{
			# Uncomment this if you want to use digest authentication
			#if (!www_authorize("openser.org", "subscriber")) {
			#	www_challenge("openser.org", "0");
			#	exit;
			#};
			xlog("L_INFO","save location $ct");
			if (is_present_hf("X-EPRANGE"))
			{
				route(SavePattern);
			}
			route(save);
			exit;
		}

		if (is_method("SUBSCRIBE"))
		{
			xlog("L_WARN","SUBSCRIBE - Method not allowed (from $fu - to $tu))");
			sl_send_reply("405", "Method not allowed");
			exit;
		}

		if ( is_method("OPTIONS") )
		{
			if (! uri=~"sip:.*[@]+.*")
			{
				xlog("L_INFO","OPTIONS sent directly to opensips - keep-alive. Send 200 OK");
				options_reply();
				exit;
			}
			else
			{
				xlog("L_INFO","OPTIONS sent here - forward it!!");
				route(2);
			}
		}

		if (method==INVITE )
		{
			xlog("L_INFO","INVITE received");

			#Check if ruri is registered
			route(2);

			#Check if the call is routable by the dispatcher module using a generic disp_setid_alg ruri user
			route(dispatcher);

			# Handle X-2X-Service header (B2BUAEP) or callto: into To Header for backwards compatibility with X2XSIPEndpoint
			if ((! uri=~"tel:.*") && ((search("X-2X-Service:") && (!(is_present_hf("Referred-By")) || !$tU ) && !(is_present_hf("Replaces"))) || ($tu =~ "callto:")))
			{
				#extract the service
				route(5);
			}

	    	if (uri=~"^(sip|tel):")
			{
				#check the X2X routing table
				route(3);
			}
		}

		#ERROR - impossible to route the call
		sl_reply_error();
		xlog("L_WARN","ERROR - Destination not found $ru");
		exit;
	}

	route(1);
}


# additional routes

#forward della chiamata
route[1]
{
	xlog("L_DBG","Route 1 - Forward message");
	if (is_method("INVITE") && uri=~"sip:OUT" )
	{
		strip(3);
		xlog("L_INFO","Route 1 - Enable RTPPROXY for voice recording");
		rtpproxy_engage("arocw");
		setflag(1); # need to be recorded
        }

	loose_route();

	# send it out now; use stateful forwarding as it works reliably
	# even for UDP2TCP
	if ($du) {
		xlog("L_NOTICE","Route 1 - t_relay message to dest $dd:$dp");
	} else {

		xlog("L_NOTICE","Route 1 - t_relay message to uri $rd:$rp");
	}
	if (!t_relay("0x08"))
	{
		xlog("L_ERR", "Error forwarding message $rd:rp");
		sl_reply_error();
	};
	xlog("L_DBG","Message sent");
	exit;
}

#Controlla se il sip uri registrato
route[2]
{
	xlog("L_DBG","Route 2 - check user if registered");
	# se trova l'alias registrato forward del messaggio, altrementi prosegue
	/*
	if (uri=~"(^tel:8[0-9]{3}$|sip:8[0-9]{3}@)" && from_uri=~"sip:8[0-9]{3}@")
	{
		sl_send_reply("403", "forbidden");
		xlog("L_WARNING","call from $fu to $ru is forbidden");
		exit;
	}
	*/
	lookup("location","b");
	if ($retcode >= 0)
	{
		xlog("L_NOTICE","Route 2 - re-written uri [$ou] -> [$ru]");
		route(1);
		return(1);
	}
	else
	{
		xlog("L_INFO","Route 2 - $rU is not registered here");
		return(2);
	}
}

#controlla se il sip uri e' nelle routing table
route[3]
{
	xlog("L_INFO","Route 3 - Check in X2X routing table From:<$fu> To:<$tu>");
	$var(newto)=$tu;
	$var(dpattr)="";
	dp_translate("1", "$ruri.user/$avp(newuri)","$var(dpattr)");
	if ($avp(newuri)) {
		xlog("L_NOTICE","Dialplan: old user: $rU --> new user: $avp(newuri) - ($var(dpattr))");

		$ru = $(ru{re.subst,/(tel|sip):([^@]+)(@?.*)$/\1:$avp(newuri)\3/g});
		$var(newto) = $(var(newto){re.subst,/(tel|sip):([^@]+)(@?.*)$/\1:$avp(newuri)\3/g});

		uac_replace_to("$tn","$ru");
		xlog("L_INFO","Dialplan: new uri:$ru - new touri:$var(newto)");

	}


	$avp(blacklist_result)=0;
	cache_raw_query("redis:g1","SISMEMBER opensips:blacklist $rU","$avp(blacklist_result)");
	xlog("L_WARN","Telephone number [$rU] is $avp(blacklist_result)");

	if (!($fU =~ "^http2sip") && $avp(blacklist_result) )
	 {
		xlog("L_WARN","Telephone number [$rU] is in blacklist!!! Forbidden");
		sl_send_reply("403", "Forbidden");
		exit;
	}

	$var(path)=$var(callrouter) + "/x2x_get_route";
	xlog("L_INFO","$time(%T).$Tsm - Calling async $var(path)");

	$var(body1)=$rm + " " +  $ru + " SIP/2.0" +
					"\r\nTo: " + $var(newto) +
					"\r\nFrom: " + $fu +
					"\r\nX-2X-Service: " + $hdr(X-2X-Service) +
					"\r\nX-2X-CallProfileID: " + $hdr(X-2X-CallProfileID) +
					"\r\nX-2X-DNIS: " + $hdr(X-2X-DNIS) +
					"\r\nX-2X-JobType: " + $hdr(X-2X-JobType) + "\r\n";

	$var(body2)=$(mb{s.substr,0,1000}{re.subst,$var(regexp)});
	if ($(mb{s.len}) > 1000) {
		$var(body3)=$(mb{s.substr,1001,0}{re.subst,$var(regexp)});
	} else {
		$var(body3)="";
	}

	$var(body)= $var(body1) + $var(body2) + $var(body3);
	$var(reg_input)= $(var(body){s.substr,0,950});

	$var(reg) = "/\+/%2B/g";
	$avp(startTS_S) = $Ts;
	$avp(startTS_SM) = $Tsm;
	async(rest_post("$var(path)", "body=$(var(reg_input){re.subst,$var(reg)})&domain=$Ri:$Rp", , "$var(body)", "$var(ct)", "$var(rcode)"),resumeRouteCB);
}

route[resumeRouteCB]
{
	$var(lastRC)=$rc;
	route(timeDuration);
	$var(duration)=$rc;

	xlog("L_INFO","$time(%T).$Tsm - resumeRouteCB - retcode: $var(lastRC) - $var(rcode) - duration: $var(duration)");

	if (  $var(rcode) != 200 ) {

                        xlog("L_ERR","Error code $var(lastRC):$var(rcode) in HTTP POST!");
                        send_reply("403", "POST Forbidden");
                        exit;
        }


        xlog("L_INFO", "HTTP POST returned $var(rcode) and body $var(body)");
        $json(response) := $var(body);
        xlog("L_INFO", "HTTP POST result is: $json(response/result)");

	if ( $json(response/result) == "false" )
	{
		xlog("L_WARN","WARNING - Send 600 - No route to destination ");
		send_reply("600",  "$json(response/description)");
		exit;
	}
	$ru = $json(response/ruri);
	$var(b2buaUri) = $json(response/ruri);
	if ( $json(response/routeid) =~ "^INB") {
			$var(processid) = $(var(b2buaUri){uri.user}{s.tolower});
			cache_fetch("local","$var(processid)",$var(processUri));
			xlog("L_INFO","Recieved user: $var(processid) - $var(processUri)");
			if ($var(processUri)) {
				$ru = $var(processUri);
			} else {
				$ru = $var(b2buaUri);
				strip(5);
				prefix("sipsbc");
			}
			uac_replace_from("sip:$fU@cloudando.com");
			remove_hf("Referred-By");
			xlog("L_INFO","Enable RTPPROXY from sipprovider");
			rtpproxy_engage("arocw");
			append_hf("X-Direction: inbound\r\n");
			topology_hiding("U");
	} else {
			if (!is_present_hf("X-2X-CallUUID") && !is_present_hf("X-REC_VUUID") && !search("User-Agent:.*VoiceXML") && !search("User-Agent: Flash2SIP"))
			{
					xlog("L_WARN","ERROR - Call not allowed because not having X-2X-CallUUID header. Coming from: [$si] - From uri: [$fu] - To uri: [$tu]" );
					sl_send_reply("403", "Forbidden");
			}
	}

	if (uri == myself ) {
		route(2);
		if($retcode == 2)
		{
			xlog("L_WARN","Send 503  Service unavailable");
			sl_send_reply("503", "Service Unavailable");
			exit;
		}
	} else {
		route(1);
	}
}

route[resumeOutboundRouteCB]
{
	route(timeDuration);
	$var(duration)=$rc;
	xlog("L_INFO","$time(%T).$Tsm - resumeOutboundRouteCB - retcode: $var(lastRC) - $var(rcode) - duration: $var(duration)");

	if (  $var(rcode) != 200 ) {

		xlog("L_ERR","Error code $var(lastRC):$var(rcode) in HTTP POST!");
		send_reply("403", "POST Forbidden");
		exit;
	}


	xlog("L_INFO", "HTTP GET returned $var(rcode) and body $var(body)");
	$json(response) := $var(body);

	if ($json(response/result) == "false") {
		xlog("L_WARN","Response is $json(response) - send 603 Route not found (SIPTrunk)");
		sl_send_reply("603", "Route not found (SIPTrunk)");
		exit;
	}

	$var(domain) = $json(response/domain);
	$ru = "sip:" + $json(response/called) + "@" +  $json(response/domain);

	$var(from)= "sip:" + $json(response/calling) + "@" + $json(response/domain);
	$var(to)= "sip:" + $json(response/called) + "@" + $json(response/domain);
	uac_replace_from("$var(from)");
	uac_replace_to("$var(to)");

	subst('/^Contact: <sip:(\w+)@(.*)$/Contact: <sip:$json(response/user)@\2/ig');
	t_on_failure("provider_auth");
	$avp(user)=$json(response/user);
	$avp(pwd)=$json(response/pwd);
	$avp(proxy)=$json(response/proxy);
	if ( $json(response/proxy) != NULL ) {
		$du = $json(response/proxy);
	}

	xlog("L_INFO","Sending message $mb");
	xlog("L_INFO","Enable RTPPROXY from sipprovider");
	rtpproxy_engage("arocw");
	topology_hiding("U");
	store_dlg_value("fromUser","$json(response/calling)");
	store_dlg_value("toUser","$json(response/called)");

	route(1);
}

#controlla se e' una chiamata verso vxml
route[4]
{
	xlog("L_INFO","ROUTE 4 - send to vxml");
	rewriteuser("vxml_sip1"); #send to vxml
	route(2);
	if ($retcode==2)
	{
		xlog("L_WARN","Service unavailable");
		sl_send_reply("503", "Service unavailable");
		exit;
	}
}

#controlla se la destinazione e' un servizio
route[5]
{
	if (search("X-2X-Service:"))
	{
		xlog("L_INFO","ROUTE 5 - Look for service $hdr(X-2X-Service) into X2X services");

		$var(serviceID)=$hdr(X-2X-Service);
	}
	else if ($tu =~ "callto:")
	{
		$var(reg)="/.*[:](.*[^>])/\1/";
		$var(serviceID)=$(tu{re.subst,$var(reg)});

		xlog("L_INFO","ROUTE 5 - Look for service $var(serviceID) taken from To header $tu into X2X services");
	}
	else
	{
		xlog("L_ERR","ROUTE 5 - No X-2X-Service header or callto: URI into To header");

		return(1);
	}

	$var(path)=$var(callrouter) + "/x2x_get_service";
	xlog("L_INFO","$time(%T).$Tsm - Calling async $var(path)");

	$var(body1)=$rm + " " +  $ru + " SIP/2.0" +
				"\r\nTo: " + $tu +
				"\r\nFrom: " + $fu +
				"\r\nX-2X-Service: " + $var(serviceID) +
				"\r\nX-2X-CallProfileID: " + $hdr(X-2X-CallProfileID) +
				"\r\nX-2X-DNIS: " + $hdr(X-2X-DNIS) +
				"\r\nX-2X-JobType: " + $hdr(X-2X-JobType) + "\r\n";

	$var(body2)=$(mb{s.substr,0,1000}{re.subst,$var(regexp)});
	if ($(mb{s.len}) > 1000) {
		$var(body3)=$(mb{s.substr,1001,0}{re.subst,$var(regexp)});
	} else {
		$var(body3)="";
	}

	$var(body)= $var(body1) + $var(body2) + $var(body3);
	$var(reg_input)= $(var(body){s.substr,0,950});
	$var(reg) = "/\+/%2B/g";
	$avp(startTS_S) = $Ts;
	$avp(startTS_SM) = $Tsm;
	async(rest_post("$var(path)", "body=$(var(reg_input){re.subst,$var(reg)})&domain=$Ri:$Rp", , "$var(body)", "$var(ct)", "$var(rcode)"),resumeServiceCB);
}

route[resumeServiceCB]
{
        $var(lastRC)=$rc;
	route(timeDuration);
	$var(duration)=$rc;

	xlog("L_NOTICE","resumeServiceCB retcode: $var(lastRC) - duration: $var(duration)");

        if ( $var(rcode) != 200) {

                        xlog("L_ERR","Error code $var(lastRC):$var(rcode) in HTTP POST!\n");
                        send_reply("403", "POST Forbidden");
                        exit;
        }
        xlog("L_INFO", "HTTP POST returned $var(rcode) and body $var(body)");
        $json(response) := $var(body);
		xlog("L_INFO", "HTTP POST result is: $json(response/result)");

        if ( $json(response/result) == "false" )
        {
                xlog("L_WARN","Service not found for X-2X-Service $hdr(X-2X-Service) - send 404");
                send_reply("404", "Not Found");
                exit;
        }
        $ru = $json(response/ruri);
        xlog("L_INFO", "re-written URI [$ou] -> [$ru]");
        route(1);

}


#rotta per gestire i tel:
route[6]
{
	xlog("L_INFO","ROUTE 6 - check tel");
	#tel: deve contenere solo numeri
	if (uri=~"tel:(P.*;|)[0-9]+$")
	{
		route(3);
	}
	else
	{
		# messaggio malformato
		xlog("L_ERR","Not valid URI - send 400 - Bad Request");
		sl_send_reply("400","Bad Request");
		exit;
	}
}


#Check if SIPSBC extracted by route[8] is registered, otherwise cycle the list
route[7]
{
	xlog("L_INFO","Route 7 - lookup for [$ru] ($rU)");
	if (lookup("location","b","$ru"))
	{
		xlog("L_INFO","re-written URI [$ou] -> [$ru]");
		$du=$ru;
		xlog("L_INFO","Send to $(ru{uri.host}) and port $(ru{uri.port})");
		t_on_failure("2");
		route(1);
		exit;
	}
	else
	{
		xlog("L_WARN", "Impossible to register $fU because $ru not found");
		sl_send_reply("503","Service Unavailable");
		exit;
	}
	if (0) #TODO: da sistemare
	{
		xlog("L_INFO","Not found $ru");
		ds_mark_dst("p");
		ds_next_dst();
		if ($retcode < 0)
		{
			xlog("L_ERR","Not found a new destination - Send 404");
			sl_send_reply("404","Not Found");
			exit;
		}
		$ru=$avp(271);
		xlog("L_INFO","New uri is $ru");
        	route(7);
		exit;
	}
}

#route the message towards a SIPSBC extracted from dispatcher list
route[8]
{
	xlog("L_INFO", "Route 8 - Message from $ua - Choose SIPSBC using $var(setid) and hash alg $var(hashid)");

	ds_select_dst("$var(setid)", "$var(hashid)","f");
	xlog("L_INFO", "Selected dest $avp(271) - du is $du ");
	$ru=$avp(271);
	route(7);
	exit;
}

#check VENDORS
route[9]
{
	xlog("L_INFO", "Route 9 - Check VENDORS");

	if ($ua=~"Reitek X2X SIP Server")
	{
		# X2XSIPEndpoint is not handled by B2BUAEP or SIPSBC
		return(1);
	}

	#setid table
	# 1 --> THOMSON
	# 2 --> Cisco
	# 3 --> Asterisk
	# 4 --> AUDC
	# 5 --> snom / Yealink / Polycom
	# 6 --> Reitek PluginSIP

	#hashid algorithm
	# 1 --> hash over from uri
	# 2 --> hash over to uri

	#Use route[8] to work with SIPSBC
	#USe route[10] to work without SIPSBC

	if ($ua=~"B2BUAEP")
	{
		$var(hashid)=1;
	}
	else
	{
		$var(hashid)=2;
	}

	if ($ua=~"(B2BUAEP )?THOMSON")
	{
		$var(setid)=1;
		#route(8);      #With SIPSBC
		route(10);      #Without SIPSBC
	}

#	if ($ua=~"(B2BUAEP )?Cisco")
#	{
#		$var(setid)=2;
#		route(8);       #With SIPSBC
#		#route(10);     #Without SIPSBC
#	}

	if ($ua=~"(B2BUAEP )?Asterisk")
	{
		$var(setid)=3;
		route(8);		#With SIPSBC
	}

	if ($ua=~"(B2BUAEP )?AUDC")
	{
		$var(setid)=5;
		route(8);		#With SIPSBC
		#route(10);		#Without SIPSBC
	}

	 if ($ua=~"(B2BUAEP )?snom")
        {
                $var(setid)=5;
                route(8);              #With SIPSBC
                #route(10);              #Without SIPSBC
        }

	if ($ua=~"(B2BUAEP )?Polycom")
        {
				$var(setid)=5;
                route(8);              #With SIPSBC
                #route(10);              #Without SIPSBC
        }

	 if ($ua=~"(B2BUAEP )?Reitek PluginSIP")
        {
                $var(setid)=5;
                route(8);              	 #With SIPSBC
                #route(10);              #Without SIPSBC
        }


}
# Send to B2BUAEP
route[10]
{
	xlog("L_INFO", "Route 10 - Message for B2BUAEP");

	route(LookupPattern);
}

route[LookupPattern]
{
        xlog("L_DBG","Route LookupPattern - Check for a pattern matching the user");
	if (lookup("location",,"$fu")){
		xlog("L_INFO","Route LookupPattern - found $ru for $fU");
		if ($oU) {
			$rU=$oU; #Do not change original requestUserName
		}
		route(1);
	} else {

		xlog("L_INFO","Route LookupPattern - First REGISTER for $ct.fields(uri)");
		$var(path)= $var(callrouter) + "/LookupPattern";
	        xlog("L_INFO","$time(%T).$Tsm - Calling async $var(path)");
		$avp(startTS_S) = $Ts;
		$avp(startTS_SM) = $Tsm;
	        async(rest_post("$var(path)", "body=$mb&domain=$Ri:$Rp", , "$var(body)", "$var(ct)", "$var(rcode)"),resumeLookupPattern);
	}
}

route[resumeLookupPattern]
{
	$var(lastRC)=$rc;
	route(timeDuration);
	$var(duration)=$rc;

        xlog("L_INFO","$time(%T).$Tsm - resumeLookupPattern retcode: $var(lastRC) - $var(rcode) - Duration: $var(duration)");

	if ( $var(rcode) != 200 ) {

		xlog("L_ERR","resumeLookupPattern: Error code $var(lastRC):$var(rcode) in HTTP POST!\n");
		send_reply("500", "Internal server error");
		exit;
	}

	xlog("L_INFO", "HTTP POST returned $var(rcode) and body $var(body)");
	$json(response) := $var(body);
	xlog("L_INFO", "HTTP POST result is: $json(response/result)");
	if ($json(response/result) == "true"){
		$ru = $json(response/ruri);
		xlog("L_INFO", "re-written URI [$ou] ($oU) -> [$ru] ($rU)");
		route(2);
	}
	else {
		xlog("L_ERR", "Not found a pattern for $(ct{uri.user})");
		# Do not send 404 because it blocks new registration requests made by pjsip-based clients
                send_reply("503","Service Unavailable");
	}
}

route[save]
{
	if (!save("location","p1"))
        {
		xlog("L_ERR","ERROR - Fail to save location for $ct");
                sl_reply_error();
        }

        if (is_present_hf("X-InboundUri")) {
                cache_store("local","$(fU{s.tolower})","$hdr(X-InboundUri)",600);
        }


}

route[SavePattern]
{
        xlog("L_DBG","Route SavePattern");
        $var(path)= $var(callrouter) +  "/SavePattern";
        xlog("L_INFO","$time(%T).$Tsm - Route SavePattern -  Calling async $var(path)");
	$avp(startTS_S) = $Ts;
	$avp(startTS_SM) = $Tsm;
        async(rest_post("$var(path)", "body=$mb&domain=$Ri:$Rp", , "$var(body)", "$var(ct)", "$var(rcode)"),resumeSavePattern);
}

route[timeDuration]
{
	$var(dur) = ($Ts - $avp(startTS_S) * 1000000 + $Tsm - $avp(startTS_SM));
	return (  $var(dur) );
}
route[resumeSavePattern]
{
	$var(lastRC)=$rc;
	route(timeDuration);
	$var(duration)=$rc;
        xlog("L_INFO","$time(%T).$Tsm - resumeSavePattern - retcode:$var(lastRC) - $var(rcode) - duration: $var(duration)");


        if ( $var(rcode) != 200 ) {

                xlog("L_ERR","resumeSavePattern - Error code $var(lastRC):$var(rcode) in HTTP POST!\n");
                #send_reply("500", "Internal server error");
				route(save);
                exit;
        }

        xlog("L_INFO", "HTTP POST returned $var(rcode) and body $var(body)");
        $json(response) := $var(body);
        xlog("L_DBG", "HTTP POST result is: $json(response/result)");
        if ($json(response/result) == "true"){
                xlog("L_DBG", "Pattern successfully saved");
        }
        else {
                xlog("L_WARN", "ERROR saving pattern");
        }
	route(save);
}

route[rtpproxy_passiverec] {
	xlog("L_INFO","Start rtpproxy for passive recorder");
	rtpproxy_engage("arocw");
	create_dialog();
	store_dlg_value("rtpproxy","YES");
	t_on_reply("rtpproxy");
	if (is_present_hf("X-2X-CallUUID")) {
		xlog("L_INFO","Set in memcached UUID: $hdr(X-2X-CallUUID) and callid $ci");
		cache_store("memcached:g1","recorder:uuid:$ci", "$hdr(X-2X-CallUUID)",$var(rec_lifetime));
                cache_store("memcached:g1","recorder:callid:$hdr(X-2X-CallUUID)", "$ci",$var(rec_lifetime));
		$avp(uuid) = $hdr(X-2X-CallUUID);
	}
	route(1);
}

route[eprange] {
	$var(ranges) = $hdr(X-EPRange);
	$var(index) = 0;
	/*
	$var(r) = $(var(ranges){s.select,var(index),","};
	while($(var(ranges){s.select,var(index),","})){
	}
	{s.select,index,separator}
	*/
}

route[check_auth] {

	$var(auth)=$(fu{uri.param,auth});

	if (method == "REGISTER" && $tU =~"^[78]") {
		if ($var(auth) != '') {
			#Check if auth is valid
			if (cache_fetch("memcached:g1","opensips:auth:$fU",$var(storep)) && $var(storep) == $var(auth) ){
				xlog("L_INFO","auth parameter is valid - message is trusted");
				return(1);
			} else {
				return(-1);
			}
		} else {
			#Ask for authentication
                	$var(username)=$tU;
                        $avp(password)="";
			cache_fetch("memcached:g1","x2l:sso:token:ep:$var(username)",$avp(password));
			xlog("L_INFO", "User [$var(username)] and pwd [$avp(password)]");
                        if (!pv_proxy_authorize("opensips.org")) {
                        	xlog("L_INFO","Authorize for $var(username) returned [$rc]");
                                proxy_challenge("opensips.org", "1");
			};
                        xlog("L_INFO", "User $tu is authenticated successfully");
                        subst('/From:(.*)>/From:\1;auth=$avp(password)>/');
			cache_store("memcached:g1","opensips:auth:$fU","$avp(password)",$var(rec_lifetime));
			return(1);
                }
	} else {
		return(1);
	}
}


route[dispatcher] {
        if ($rU =~ "^disp_[0-9]+_[0-9]+$") {
                $var(setid) = $(rU{s.select,1,_});
                $var(alg) = $(rU{s.select,2,_});
                xlog("L_INFO","dispatcher: Received a dispatcher request: $rU - setID $var(setid) - alg: $var(alg)");
                ds_select_dst("$var(setid)","$var(alg)","f");

                if ($retcode < 0)
                {
                        xlog("L_ERR","dispacther: No entry found for setID: $var(setid) - send 404");
                        send_reply("404","Not Found");
                        exit;
                }

                $ru=$avp(271);
                $du=$ru;
                xlog("L_INFO","dispatcher: Send request to $avp(271) - next is $(avp(271)[1])");
                t_on_branch("dispatcher_branch");
                t_on_failure("dispatcher_failover");
                route(2);
                route(1);
        }
}


# onreply routes

onreply_route
{
	xlog("L_INFO","------------------------------------------------------------");
	xlog("L_NOTICE","Received response [$si:$sp] $rs $rr $rm CSeq: $cs $ci " );
	xlog("L_INFO","$mb" );
	if ( is_method("INVITE") && to_uri=~"sip:835[0-9].+$" )
	{
		append_hf("Call-Info: billing\r\n");
	}
	#REMOVE auth parameter
	$var(auth)=$(fu{uri.param,auth});
	if ($var(auth)) {
		subst('/From:(.*);auth=[^;>]*>/From:\1>/');
	}

}

onreply_route[rtpproxy]
{
        xlog("L_INFO","------------------------------------------------------------");
        xlog("L_NOTICE","Received response [$si:$sp] $rs $rr $rm CSeq: $cs $ci");
        xlog("L_INFO","$mb" );
	xlog("L_INFO", "RTPPROXY: $avp(proxy)");

	if ($rs >= 180 ) {
		if (is_present_hf("X-2X-CallUUID")) {
			xlog("L_INFO","Set in memcached UUID: $hdr(X-2X-CallUUID) and callid $ci");
			cache_store("memcached:g1","recorder:uuid:$ci", "$hdr(X-2X-CallUUID)",$var(rec_lifetime));
			cache_store("memcached:g1","recorder:callid:$hdr(X-2X-CallUUID)", "$ci",$var(rec_lifetime));
			$var(uuid) = $hdr(X-2X-CallUUID);
		} else {
			$var(uuid) = $avp(uuid);
		}

		xlog("L_INFO","PartySwitchID: $ci;to-tag=$tt;from-tag=$ft and uuid is $avp(uuid) -  $var(uuid)");
		cache_store("memcached:g1","recorder:established:$var(uuid)","$ci;to-tag=$tt;from-tag=$ft",$var(rec_lifetime));
		cache_store("memcached:g1","recorder:sipkey:$var(uuid):$tU","$ci;to-tag=$tt;from-tag=$ft",$var(rec_lifetime));
	}

}


# branch routes

# Branch route in order to overwrite To header
branch_route[dispatcher_branch]
{
        xlog("L_INFO", "BRANCH ROUTE dispatcher_branch");

        remove_hf("To");
        append_hf("To: <$ru>\r\n");
}


# failure routes

failure_route[1]
{
	xlog("L_ERR","Failed to relay message");
}

failure_route[2]
{
    if(is_method("INVITE"))
	{
		xlog("L_ERR","Failed to relay message");

		ds_mark_dst("p");
		ds_next_dst();
		if ($retcode < 0)
        {
        	xlog("L_ERR","Not found a new destination - Send 404");
            #sl_send_reply("404","Not Found");
            exit;
        }

 	 	$ru=$avp(271);
        	route(7);

        exit;
	}
}

failure_route[provider_auth]
{
	xlog("L_INFO","++++++++++++++++ provider_auth route ++++++++++++++++");


	if (t_check_status("40[17]")) {
		xlog("L_INFO","got challenged \n");


		## GET REALM from failure response

		if ($(<reply>hdr(Proxy-Authenticate))) {
			$var(raw_auth) =  $(<reply>hdr(Proxy-Authenticate));
		}

		if ($(<reply>hdr(WWW-Authenticate))) {
			$var(raw_auth) =  $(<reply>hdr(WWW-Authenticate));
		}

		if ( $var(hdr) != NULL ) {
                	$var(raw_auth) = $var(hdr);
			xlog("L_INFO", "Proxy-Auth is present");
		}

		$var(reg_start) = "/(.*?)realm=\"//g";
                $var(reg_end) = "/\"(.*)//g";
                xlog("L_INFO", "Raw data $var(raw_auth)");
                $var(raw_auth) =  $(var(raw_auth){re.subst,$var(reg_start)});
                $var(raw_auth) =  $(var(raw_auth){re.subst,$var(reg_end)});
                xlog("L_INFO", "Got realm data $var(raw_auth)");
		$avp(realm)= $var(raw_auth);
		xlog("L_INFO","Use user:$avp(user) and pwd:[$avp(pwd)] - realm:$avp(realm)");


     		if (uac_auth()) {
		    xlog("L_INFO","auth was succesful");
	            t_relay();
		}
	}
}

# Failure detection in order to choose next available destination
failure_route[dispatcher_failover]
{
        if (t_was_cancelled())
        {
                exit;
        }

        xlog("L_INFO", "FAILURE ROUTE dispatcher_failover - call to $rd:$rp failed ($(<reply>rs) $(<reply>rr))");

        if (t_check_status("(408)|([56][0-9][0-9])"))
        {
                xlog("L_NOTICE","FAILURE ROUTE dispatcher_failover - marking $rd:$rp");
                ds_mark_dst("p");
		}


}


# local routes

local_route {

        xlog("L_INFO","------------------------------------------------------------");
	xlog("L_NOTICE","Sending request $rm to $ru - $du - CSeq: $cs");
	xlog("L_INFO", "local_route - Sending message: $mb");
	if (is_method("REGISTER")) {
		xlog("L_INFO", "Sending a REGISTER to $ru");
		add_local_rport();
	}
}


# event routes

event_route[E_UL_CONTACT_DELETE]
{
	fetch_event_params("aor=$var(aor)");
	xlog("L_INFO", "E_UL_CONTACT_DELETE - $var(aor)");
}

event_route[E_UL_AOR_INSERT]
{
	xlog("L_INFO", "E_UL_AOR_INSERT");

}
